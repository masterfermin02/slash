<?php

use PHPUnit\Framework\TestCase;
use Slash\Objects;

class ObjectsTest extends TestCase {

    /**
     * The instance of Utilities.
     *
     * @var Objects
     */
    protected $objects;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->objects = New Objects();
    }

    /**
     * @dataProvider cases
     */
    public function testFunctionMethods($list, $func, $method, $expected)
    {
        $this->assertEquals($expected, call_user_func([$this->objects, $method], $list, $func));
    }

    /**
     * @dataProvider valueCases
     */
    public function testArrayMethods($list, $method, $expected)
    {
        $this->assertEquals($expected, call_user_func([$this->objects, $method], $list));
    }

    public function cases()
    {
        $obj = new \stdClass;
        $obj->foo = 'bar';
        return [
            'With apply' => [
                'list' => new \stdClass,
                'func' => function($object) {
                    $object->foo = 'bar';
                },
                'method' => 'apply',
                'experted' => $obj,
            ],
            'With  has' => [
                'list' => new \stdClass,
                'func' => 'foo',
                'method' => 'has',
                'experted' => false,
            ],
            'With  extend' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'func' => (object) ['c' => 3, 'd' => 4],
                'method' => 'extend',
                'experted' => (object) ['c' => 3, 'd' => 4, 'a' => 1, 'b' => 2],
            ],
            'With  defaults' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'func' => (object) ['c' => 3, 'd' => 4],
                'method' => 'defaults',
                'experted' => (object) ['c' => 3, 'd' => 4, 'a' => 1, 'b' => 2],
            ],
            'With array defaults' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'func' => [(object) ['c' => 3], (object) ['d' => 4]],
                'method' => 'defaults',
                'experted' => (object) ['c' => 3, 'd' => 4, 'a' => 1, 'b' => 2],
            ],
            'With isEqual' => [
                'list' => 1,
                'func' => 1,
                'method' => 'isEqual',
                'experted' => true,
            ],
            'With not isEqual' => [
                'list' => 1,
                'func' => 0,
                'method' => 'isEqual',
                'experted' => false,
            ],
        ];
    }

    public function valueCases()
    {
        return [
            'With keys' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'method' => 'keys',
                'experted' => ['a','b']
            ],
            'With values' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'method' => 'values',
                'experted' => [1,2]
            ],
            'With copy' => [
                'list' => (object) ['a' => 1, 'b' => 2],
                'method' => 'copy',
                'experted' => (object) ['a' => 1, 'b' => 2]
            ],
            'With isNull' => [
                'list' => null,
                'method' => 'isNUll',
                'experted' => true
            ],
            'With isNull false' => [
                'list' => 1,
                'method' => 'isNUll',
                'experted' => false
            ],
            'With array isTraversable' => [
                'list' => [],
                'method' => 'isTraversable',
                'experted' => true
            ],
            'With null isTraversable' => [
                'list' => null,
                'method' => 'isTraversable',
                'experted' => false
            ],
            'With array isArray' => [
                'list' => [],
                'method' => 'isArray',
                'experted' => true
            ],
            'With  isDate' => [
                'list' => new DateTime,
                'method' => 'isDate',
                'experted' => true
            ],
            'With not isDate' => [
                'list' => new stdClass,
                'method' => 'isDate',
                'experted' => false
            ],
            'With not isNumber' => [
                'list' => '',
                'method' => 'isNumber',
                'experted' => false
            ],
            'With  isNumber' => [
                'list' => 1,
                'method' => 'isNumber',
                'experted' => true
            ],
            'With not isBoolean' => [
                'list' => new stdClass,
                'method' => 'isBoolean',
                'experted' => false
            ],
            'With isBoolean' => [
                'list' => true,
                'method' => 'isBoolean',
                'experted' => true
            ],
            'With  isString' => [
                'list' => '',
                'method' => 'isString',
                'experted' => true
            ],
            'With not  isString' => [
                'list' => true,
                'method' => 'isString',
                'experted' => false
            ],
            'With  isFunction' => [
                'list' => function() {},
                'method' => 'isFunction',
                'experted' => true
            ],
            'With not isFunction' => [
                'list' => true,
                'method' => 'isFunction',
                'experted' => false
            ],
            'With isObject' => [
                'list' => new stdClass,
                'method' => 'isObject',
                'experted' => true
            ],
            'With not isObject' => [
                'list' => true,
                'method' => 'isObject',
                'experted' => false
            ],
            'With not isEmpty' => [
                'list' => true,
                'method' => 'isEmpty',
                'experted' => false
            ],
            'With isEmpty' => [
                'list' => [],
                'method' => 'isEmpty',
                'experted' => true
            ],
        ];
    }

    function testMethods()
    {
        $methods = $this->objects->methods(new DummyMethods3());
        $this->assertEquals(['foo'], $methods);
        $this->expectException('ReflectionException');
        $this->objects->methods('bar');

    }
}

class DummyMethods3 {

    public function foo($var = 'wow')
    {
        return $var;
    }

}
