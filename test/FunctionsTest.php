<?php

use PHPUnit\Framework\TestCase;
use Slash\Functions;

class FunctionsTest extends TestCase {

    /**
     * The instance of Utilities.
     *
     * @var Functions
     */
    protected $functions;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->functions = New Functions();
    }

    #[\PHPUnit\Framework\Attributes\DataProvider('valueCases')]
    public function testArrayMethods(\Closure $list, string $method, ?string $expected): void
    {
        $this->assertEquals($expected, call_user_func([$this->functions, $method], $list));
    }

    public static function valueCases(): array
    {
        return [
            'With cache' => [
                'list' => function (): string { return 'Hello'; },
                'method' => 'cache',
                'expected' => 'Hello',
            ],
            'With once' => [
                'list' => function (): string { return 'Hello'; },
                'method' => 'once',
                'expected' => null,
            ],
        ];
    }

    public function testWrap(): void
    {
        $this->assertEquals('Hello', $this->functions->wrap(function(): string { return 'Hello'; }, function($fn) { return $fn(); }));
    }

    public function testCompose(): void
    {
        $sum = function ($a, $b): float|int|array {
            return $a + $b;
        };
        $functions = [
            Slash\reduceWith($sum),
            Slash\filterWith('Slash\isEven')
        ];
        $args = [[1,2,3,4]];
        $this->assertEquals(6, $this->functions->compose($functions, $args));
    }

    public function testAfter(): void
    {
        $closure = function(): string
        {
            return 'foo';
        };

        $this->assertEquals(null, $this->functions->after(2, $closure));
        $this->assertEquals(null, $this->functions->after(2, $closure));
        $this->assertEquals('foo', $this->functions->after(2, $closure));
    }
}
